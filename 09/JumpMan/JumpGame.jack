class JumpGame {
   field Character character; // the square of this game
   field int direction; // the square's current direction: 
    field int i, z, x1, x2, y1, y2, x3, y3, x4, y4;                    // 0=none, 1=up, 2=down, 3=left, 4=right
    field Ledge ledge;
	field Ledge ledge2;
	field Ledge ledge3;
	
	field int ledger;
   /** Constructs a new Square Game. */
   constructor JumpGame new() {
      // Creates a 30 by 30 pixels square and positions it at the top-left
      // of the screen.
      let character = Character.new(0, 0, 30, 15);
	  let ledge = Ledge.new(200, 200, 2, 30);
	  let ledge2 = Ledge.new(100, 100, 2, 10);
	  let ledge3 = Ledge.new(60, 200, 2, 40);
      let direction = 0;  // initial state is no movement
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do character.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do character.moveUp(); }
      if (direction = 2) { do character.moveDown(); }
      if (direction = 3) { do character.moveLeft(); }
      if (direction = 4) { do character.moveRight(); }
      do Sys.wait(5);  // delays the next movement
      return;
   }
   method int ledgeCheck(){
   
   let x1 = ledge.getX();
   let y1 = ledge.getY();
     let x3 = ledge.getX();
   let y3 = ledge.getY();
      let x4 = ledge.getX();
   let y4 = ledge.getY();
   let x2 = character.getX();
   let y2 = character.getY();
   if(y1 = y2){
     if(x2 > x1){
	   if( x2 < (x1 + 40)){
	   return 1;
	  }
	  }
   }
      if(y3 = y2){
     if(x2 > x3){
	   if( x2 < (x3 + 40)){
	   return 1;
	  }
	  }
   }
      if(y4 = y2){
     if(x2 > x4){
	   if( x2 < (x4 + 40)){
	   return 1;
	  }
	  }
   }
   
   return 0;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {  
		 
		 let ledger = ledgeCheck();
		 if (ledger = 0) {do character.gravity(0);}
		   
            let key = Keyboard.keyPressed();
            do Sys.wait(5); 
         }
		 
		 if (key = 74)  {
		 let direction = 1; 
		 let i = 0;
		 while(i < 40){
		 
		 let key = Keyboard.keyPressed();
		 let z = 0;
		 if (key = 130) {let z = -1;  }
		 if (key = 132) { let z = 1;} 		 
		 do character.jump(z);
		 let i = i + 1;
		 do Sys.wait(5);		 
		 }
		 let i = 0;
		 while(i < 40){
		 let ledger = 0;
		 let key = Keyboard.keyPressed();
		 let z = 0;
		 if (key = 130) {let z = -1;  }
		 if (key = 132) { let z = 1;} 		 
		 do character.gravity(z);
		 let i = i + 1;
		 let ledger = ledgeCheck();
		 if (ledger = 1) {let i = 40;}
		 do Sys.wait(10);		 
		 }		 
		 }
		 
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow
         do ledge.draw();
         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveSquare();
         }
     } // while
     return;
   }
}