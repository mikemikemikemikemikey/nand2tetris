// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
     static boolean color;
	 static Array ram;
	 static Array twoToThe;
    /** Initializes the Screen. */
    function void init() {
	let ram = 0;
	let twoToThe = Array.new(15);
	let twoToThe[0] = 1;
	let twoToThe[1] = 2;
	let twoToThe[2] = 4;
	let twoToThe[3] = 8;
	let twoToThe[4] = 16;
	let twoToThe[5] = 32;
	let twoToThe[6] = 64;
	let twoToThe[7] = 128;
	let twoToThe[8] = 256;
	let twoToThe[9] = 512;
	let twoToThe[10] = 1024;
	let twoToThe[11] = 2048;
	let twoToThe[12] = 4096;
	let twoToThe[13] = 8192;
	let twoToThe[14] = 16384;
	let twoToThe[15] = 0 - 16384 - 16384;
    let color = true;
	return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
	var int d;
	let d = 16384;
	while(d < 24576){
	  let ram[d] = 0;
	  let d = d+1;	
	}
	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
	   let color = b;
	   return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
	    var int address, value, modulo;
		let address = (32 * y ) + (x/16);
		let value = Memory.peek[16384 + address];
		if(x<16){
		  let modulo = x;
		}else{
		    while(x > 16){
			 let x = x - 16;
			}
			let modulo = x;
			
		
		}
		 if(color){
		 let value = (value | twoToThe[modulo]);
		 }else{
		 let value = (value & twoToThe[modulo]);
		 }
		do Memory.poke(16384+address,value);
		return;
		
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
	var int a, b, diff, dy, dx;
	let a = 0;
	let b = 0;
	let diff = 0;
	let dy = y2 - y1;
	let dx = x2 - x1;
	    if(dy = 0){
		  while(a < dx){
		  
		  do Screen.drawPixel(x1+a, y1);
		 
		  let a = a+1;
		  }
		return;
		}
		if(dx = 0){
		 while(b<dy){
		 do Screen.drawPixel(x1, y1+b);
		 let b = b+1;
		 }
		
		}
		if((dx > 0) & (dy>0)){
		  while(((a < dx)|(a=dx))&((b < dy)|(b=dy))){
			do Screen.drawPixel(x1 +a, y1 +b);
			if(diff < 0){
			  let a = a+1;
			  let diff = diff + dy;
			} else{
			  let b = b+1;
			  let diff = diff - dx;
			  }
		  }
         return;		  
		}
		if((dx > 0) & (dy<0)){
		  while(((a < dx)|(a=dx))&((b > dy)|(b=dy))){
			do Screen.drawPixel(x1 +a, y1 +b);
			if(diff < 0){
			  let a = a+1;
			  let diff = diff - dy;
			} else{
			  let b = b-1;
			  let diff = diff - dx;
			  }
		  }
          return;		  
		}
		if((dx < 0) & (dy<0)){
		  while(((a > dx)|(a=dx))&((b > dy)|(b=dy))){
			do Screen.drawPixel(x1 +a, y1 +b);
			if(diff < 0){
			  let a = a - 1;
			  let diff = diff - dy;
			} else{
			  let b = b-1;
			  let diff = diff + dx;
			  }
		  }
          return;		  
		}
		if((dx < 0) & (dy>0)){
		  while(((a > dx)|(a=dx))&((b < dy)|(b=dy))){
			do Screen.drawPixel(x1 +a, y1 +b);
			if(diff < 0){
			  let a = a - 1;
			  let diff = diff + dy;
			} else{
			  let b = b-1;
			  let diff = diff + dx;
			  }
		  }	
		  return;
		}
		return;
       		
	}

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	var int dy;
	let dy = y1;
	  while(dy < y2){
	    do Screen.drawLine(x1, dy, x2, dy);
		let dy = dy +1;
	  }
	  return;
	  
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy, sqr;
		let dy = r - r -r;
		  while(dy < r) {
		  let sqr = Math.sqrt((r*r) - (dy *dy));
	        do Screen.drawLine(x - sqr, y - dy, x + sqr, y - dy);
			let dy = dy +1;
		  }

		  
		  return;
	
	}
	
    
}
