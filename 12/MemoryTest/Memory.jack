// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
	static Array heap;
	static Array freeList;
	
    /** Initializes the class. */
    function void init() {
	let ram = 0;
	let heap = 0;
    let freeList = 2048;	
	let freeList[0] = 0;	
	let freeList[1] = 12286;
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let ram[address] = value;
	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	var int block;
	var int next;
	var int tempSize;
	var int previous;
	if(size < (freeList[1] - 2)){
	  let block = freeList;
	  let tempSize = freeList[1];
	  let heap[block] = 0;
	  let heap[block + 1] = size;
	  

	  let freeList = freeList + size + 2;
	  	  let freeList[1] = tempSize - (size + 2);
	  return block+2;
	}else{
	let previous = freeList;
	let next = freeList[0];
	     while(next > 0){
		   if(heap[next]+1 > size + 2){
		     let block = heap[next+2];
			 let heap[block] = 0;
			 let heap[block+1] = size;
		     let heap[previous] = heap[next];
		     return block+2;
		   }
		   let next = heap[next];
		 }
		 return 0;
	}
	
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	
	var int next;
	let next = freeList[0];
	if(next = 0){
	let heap[freeList] = o-2;
	return;
	}
	while(heap[next] > 0){
	  let next = heap[next];
		if(next = 0){
	      let heap[freeList] = o-2;
	      return;
	     }   
	}
	let heap[next] = o-2;
	return;
    }    
}
