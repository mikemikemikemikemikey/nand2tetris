function Math.init 0
push constant 15
call Array.new 1
pop static 0
push static 0
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.abs 1
push argument 0
push constant 0
lt
not
if-goto Math.if.0
push argument 0
push argument 0
sub
push argument 0
sub
return
goto Math.else.0
label Math.if.0
push argument 0
return
label Math.else.0
function Math.multiply 7
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
and
or
not
if-goto Math.if.1
push constant 0
pop local 3
goto Math.else.1
label Math.if.1
push constant 1
neg
pop local 3
label Math.else.1
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label Math.loopStart.2
push local 2
push constant 15
lt
not
if-goto Math.loopEnd.2
push argument 1
push local 2
call Math.bit 2
pop local 4
push local 4
not
if-goto Math.if.3
push local 0
push local 1
add
pop local 0
goto Math.else.3
label Math.if.3
label Math.else.3
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto Math.loopStart.2
label Math.loopEnd.2
push local 3
not
if-goto Math.if.4
push local 0
push local 0
sub
push local 0
sub
return
goto Math.else.4
label Math.if.4
push local 0
return
label Math.else.4
function Math.bit 2
push static 0
push argument 1
add
pop pointer 1
push that 0
push argument 0
and
push static 0
push argument 1
add
pop pointer 1
push that 0
eq
not
if-goto Math.if.5
push constant 1
neg
return
goto Math.else.5
label Math.if.5
push constant 0
return
label Math.else.5
function Math.divide 4
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
and
or
not
if-goto Math.if.6
push constant 0
pop local 1
goto Math.else.6
label Math.if.6
push constant 1
neg
pop local 1
label Math.else.6
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
not
if-goto Math.if.7
push constant 0
return
goto Math.else.7
label Math.if.7
label Math.else.7
push argument 0
push constant 2
push argument 1
call Math.multiply 2
call Math.divide 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto Math.if.8
push local 1
not
if-goto Math.if.9
push constant 2
push local 0
call Math.multiply 2
push constant 2
push local 0
call Math.multiply 2
sub
push constant 2
push local 0
call Math.multiply 2
sub
return
goto Math.else.9
label Math.if.9
push constant 2
push local 0
call Math.multiply 2
return
label Math.else.9
goto Math.else.8
label Math.if.8
push local 1
not
if-goto Math.if.10
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
sub
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
sub
return
goto Math.else.10
label Math.if.10
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
return
label Math.else.10
label Math.else.8
function Math.sqrt 3
push constant 0
pop local 0
push constant 7
pop local 1
label Math.loopStart.11
push local 1
push constant 1
neg
gt
not
if-goto Math.loopEnd.11
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
push constant 181
gt
not
if-goto Math.if.12
push local 1
push constant 1
sub
pop local 1
goto Math.else.12
label Math.if.12
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
call Math.multiply 2
push argument 0
lt
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
call Math.multiply 2
push argument 0
eq
or
not
if-goto Math.if.13
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 0
goto Math.else.13
label Math.if.13
push local 1
push constant 1
sub
pop local 1
label Math.else.13
label Math.else.12
goto Math.loopStart.11
label Math.loopEnd.11
push local 0
return
function Math.max 2
push argument 0
push argument 1
gt
not
if-goto Math.if.14
push argument 0
return
goto Math.else.14
label Math.if.14
push argument 1
return
label Math.else.14
function Math.min 2
push argument 0
push argument 1
lt
not
if-goto Math.if.15
push argument 0
return
goto Math.else.15
label Math.if.15
push argument 1
return
label Math.else.15
