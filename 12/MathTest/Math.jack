// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
	
    /** Initializes the library. */
    function void init() {
	let twoToThe = Array.new(15);
	let twoToThe[0] = 1;
	let twoToThe[1] = 2;
	let twoToThe[2] = 4;
	let twoToThe[3] = 8;
	let twoToThe[4] = 16;
	let twoToThe[5] = 32;
	let twoToThe[6] = 64;
	let twoToThe[7] = 128;
	let twoToThe[8] = 256;
	let twoToThe[9] = 512;
	let twoToThe[10] = 1024;
	let twoToThe[11] = 2048;
	let twoToThe[12] = 4096;
	let twoToThe[13] = 8192;
	let twoToThe[14] = 16384;
	
	
	return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
	if(x < 0){
	return x-x-x;
	}else{
	return x;
	}
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
	var int sum, shiftedX,i;
	var boolean neg;
	var boolean test;
	if(((x < 0) & (y < 0)) | ((x > 0 )& (y > 0))){
	let neg = false;
	} else {
	let neg = true;
	}
	let x = Math.abs(x);
	let y = Math.abs(y);
	let sum = 0;
	let shiftedX = x;
	let i = 0;
	while(i < 15){
	  let test = Math.bit(y, i);
	  if(test){
	   let sum = sum + shiftedX;		
	  }
	  let shiftedX = shiftedX + shiftedX;
	  let i = i + 1;
	}
	if(neg){
	return sum - sum - sum;
	}else{
	return sum;
	}
	
    }
	
	function boolean bit(int x, int i){
	if((twoToThe[i] & x) = twoToThe[i]){
	  return true;
	  }else{
	  return false:
	  }
	}

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
	var int q;
	var boolean neg;
	if(((x < 0) & (y < 0)) | ((x > 0 )& (y > 0))){
	let neg = false;
	} else {
	let neg = true;
	}
    let x = Math.abs(x);
    let y = Math.abs(y);	
	
	if(y > x){
	  return 0;
	}
	let q = x/(2*y);
	  if((x-(2*q*y))<y){ 
	  
	  	if(neg){
	      return (2*q) - (2*q) - (2*q);
	    }else{
	      return 2*q;
	    }
      }else{
	  	if(neg){
	      return (2*q + 1) - (2*q +1) - (2*q+1);
	    }else{
	      return 2*q + 1;
	    }
	  
	   }
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
	var int y,j;
	let y = 0;
	let j = 7;
	while(j > (-1)){
	  if((y + twoToThe[j]) > 181){
	   let j = j - 1;
	  } else{
	        if((((y + twoToThe[j])*(y + twoToThe[j])) < x) | (((y + twoToThe[j])*(y + twoToThe[j])) = x)){
             let y = y + twoToThe[j];
	        } else{
	  
             let j = j - 1;	
              }
        }		
	}
	return y;

    }

    /** Returns the greater number. */
    function int max(int a, int b) {
	if(a > b){
	return a;
	}else{
	return b;
	}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
	if(a < b){
	return a;
	}else{
	return b;
	}
    }
}
